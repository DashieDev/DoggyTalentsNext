plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
}

version = '1.18.29-indev'
group = 'com.github.dashiedev'
archivesBaseName = "DoggyTalentsNext[Forge]-${project.target_mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources.srcDirs += 'src/generated/resources'
    }
}

tasks.named("processResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier = 'api'
    from sourceSets.api.output
    from sourceSets.api.allJava
}

configurations { 
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {

    mappings channel: 'official', version: '1.21'
    reobf = false

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            taskName 'doggytalents_client'
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                doggytalents.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        server {
            taskName 'doggytalents_server'
            workingDirectory file('run-server')
            property 'forge.logging.console.level', 'debug'
            mods {
                doggytalents.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        data {
            taskName 'doggytalents_data'
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'doggytalents', '--all', '--output', '"' + file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
            mods {
                doggytalents.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.21-51.0.33'
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output

    manifest {
        attributes([
            "Specification-Title": "Doggy Talents Next",
            "Specification-Vendor": "dashiedev",
            "Specification-Version": project.version,
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"dashiedev",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
