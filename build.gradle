plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.105'
}

version = '1.18.15'
group = 'com.github.dashiedev'
archivesBaseName = "DoggyTalentsNext-${project.target_mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources.srcDirs += 'src/generated/resources'
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

tasks.named("processResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier = 'api'
    from sourceSets.api.output
    from sourceSets.api.allJava
}

configurations { 
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    client {
        //taskName 'doggytalents_client'
        workingDirectory file('run')
        systemProperty 'forge.logging.console.level', 'debug'
        modSources.add(project.getSourceSets().main)
        modSources.add(project.getSourceSets().api)
    }

    server {
        //taskName 'doggytalents_server'
        workingDirectory file('run-server')
        systemProperty 'forge.logging.console.level', 'debug'
        modSources.add(project.getSourceSets().main)
        modSources.add(project.getSourceSets().api)
    }

    data {
        //taskName 'doggytalents_data'
        workingDirectory file('run')
        systemProperty 'forge.logging.console.level', 'debug'
        programArguments.addAll '--mod', 'doggytalents', '--all', '--output', '"' + file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
        modSources.add(project.getSourceSets().main)
        modSources.add(project.getSourceSets().api)
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {

    implementation "net.neoforged:neoforge:20.6.14-beta"

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output

    manifest {
        attributes([
            "Specification-Title": "Doggy Talents Next",
            "Specification-Vendor": "dashiedev",
            "Specification-Version": project.version,
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"dashiedev",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}


tasks.named("runClient") {
    doFirst {

        println("vmArgs:")
        def vmArgs = "";
        for (item in runs.client.realiseJvmArguments()) {
            vmArgs = vmArgs + item + " "
        }
        println(vmArgs)
        println("==================================")
        println("args:")
        def args1 = ""
        for (item in runs.client.getProgramArguments().get()) {
            args1 = args1 + item + " "
        }
        println(args1)
        println("==================================")
        println("")
        println("")
    }
}

tasks.named("runData") {
    doFirst {

        println("vmArgs:")
        def vmArgs = "";
        for (item in runs.data.realiseJvmArguments()) {
            vmArgs = vmArgs + item + " "
        }
        println(vmArgs)
        println("==================================")
        println("args:")
        def args1 = ""
        for (item in runs.data.getProgramArguments().get()) {
            args1 = args1 + item + " "
        }
        println(args1)
        println("==================================")
        println("")
        println("")
    }
}